[[upgrading]]
==  Upgrading
{inall}

[[upgrade-introduction]]
=== Introduction

Upgrading {nxrm} presents a necessary step to gain access to new features, bug fixes, performance improvements and
other advantages. Regular updates to the latest release are recommended as a general best practice.

Specifically {nxrm} 3 represents a shift in design that supports a wider set of features requested by customers,
as well as a platform for a modern, expanded set of functionality. Given these changes, many to the core
architecture, the upgrade process requires more attention than in previous versions.

This chapter covers upgrades of {nxrm} in general. The process of upgrading depends on the specific usage of the
repository manager, its configuration and integration with other tools and is potentially complex.  Further
resources can be found in the https://support.sonatype.com/hc/en-us/sections/204911768[Support Knowledge Base].

IMPORTANT: {pro} customers can take advantage of the assistance of the support team.

[[why-upgrade]]
=== Why Upgrade?

As of {nxrm} 3.1 there is wider feature and functionality equivalency to {nxrm} 2. Highlights of new functionality
include:
////
* High availability (Component Fabric)
////
* Expanded repository format support
* Improved user interface
* Powerful component search
* Universal repository browsing
* Enhanced metadata

Of course, the choice to upgrade depends on the features your team is using and planning to use. In
many cases upgrading to version 3 provides an enhanced set of features to support modern development 
practices and automation. However, it is a good idea to review the support site to compare 
link:https://support.sonatype.com/hc/en-us/articles/226495428[repository format support], 
link:https://support.sonatype.com/hc/en-us/articles/226489388[feature equivalency], and 
link:https://support.sonatype.com/hc/en-us/articles/222426568[compatibility across versions].

IMPORTANT: Upgrading {nxrm} 2 to 3 only provides native tooling to transfer content and configurations from
the respective source repository manager to the target repository manager. We strongly discourage you to
run the upgrade from version 2 to version 3 while simultaneously running any data center-to-data center
transfers (e.g. synchronizing applications in your cloud server to on-premises data centers, or vice-versa).

[[upgrade-version-two]]
=== Upgrading from 2.x to 2.y

At a higher level, upgrading from a `2.x` release of {nxrm} to a newer `2.y` version typically includes

* Extracting the new release bundle.
* Replicating configuration changes.
* Stopping `2.x` instance.
* Replacing the application directory with the new instance.
* Starting the new instance.

Further instructions are available on the https://support.sonatype.com/hc/en-us/articles/213464198[support site].

[[upgrade-version-three]]
=== Upgrading from 3.x to 3.y

Upgrades of version 3 are supported for version 3 milestone 7 and later. The upgrade is a similar process to
version 2 upgrades and is documented in more detail in the
https://support.sonatype.com/hc/en-us/articles/217967608[knowledge base article].

This must be done before <<upgrade-version-two-three,upgrading version 2.x to 3.y>>.

[[upgrade-version-three-ha]]
=== Upgrading from 3.x HA to 3.y HA

It is recommended to conduct a comprehensive <<backup,backup>> before attempting the upgrade of an HA cluster.
This includes a backup of shared blob store filesystems and the <<data-directory,data directory>> on each cluster
node.

Currently, {nxrm} must be stopped on all nodes in the cluster before upgrading each individual node.
The software on each node can be upgraded as in <<upgrade-version-three>>, taking care to re-apply
any customizations that are not contained in the <<data-directory,data directory>>.

After the software has been upgraded on each node, the nodes can be brought back online one at a time, allowing
each node to startup completely before bringing the next node online.

[[upgrade-version-two-three]]
=== Upgrading 2.x to 3.y

TIP: Sonatype recommends using the latest 2.x and 3.y to assure that any fixes in the upgrade process are 
utilized when upgrading. The latest {nxrm} versions are verified as compatible before deployment.

Upgrading from {nxrm} 2 to 3 requires the involved repository managers to use a compatible version of {nxrm} 2 
and 3. If the source repository manager uses a version prior to 2.14.1, you must upgrade it as detailed in 
<<upgrade-version-two>> before starting the upgrade to {nxrm} 3. The target repository manager is typically a 
fresh installation with a minimum release version of 3.1. If an existing {nxrm} 3 is used as the target, it has 
to be upgraded to 3.1 (or later) as documented in <<upgrade-version-three>>.

WARNING: Using an existing installation of {nxrm} 3 populated with data and configuration as the target 
repository manager incurs restrictions that make the upgrade more complex and potentially requires re-configuring 
the version 2 instance prior to the upgrade as well as re-configuring {nxrm} 3 after the upgrade.

If you must upgrade using an older version of {nxrm} 2, against the recommendations of Sonatype, see the 
https://support.sonatype.com/hc/en-us/articles/115007568788[compability matrix] to make sure you upgrade to the 
correct associated version. Upgrading using non-associated versions will result in errors. Also remember, only 
versions 2.14.1 and beyond can be upgraded.

[[upgrade-process-expectations]]
==== Upgrade Process and Expectations

The process of upgrading {nxrm} 2 to 3, is similar to any major enterprise application upgrade, and should be
managed via an upgrade plan. The upgrade plan is really just a specific checklist of all the steps required to
perform the upgrade.

While the upgrade process is underway, you can continue to use the source {nxrm} 2. Any repository content thatâ€™s
added, updated, or deleted is picked up by the upgrade and added to the target {nxrm} 3 -- however, configuration
changes are not.

You should not make changes to items such as realm settings, permissions, roles, role assignments, HTTP
configuration, SSL certificates, or add new repositories. These types of configuration changes are not taken into
account for an ongoing upgrade and can cause the upgrade process to fail.

[[upgraded]]
==== What Is Upgraded

As mentioned, {nxrm} 3 represents an application design shift, involving a new architecture that supports advanced
features for today's development practices. As such, a number of core changes to data stored occur as part of the
upgrade process. This includes:

Component storage format from files to blobs:: Components in {nxrm} 2 are stored as individual files on
  disk. Version 3 stores components as <<admin-repository-blobstores,blobs>>. The conversion process requires
  version 3 to iterate over every component stored in version 2. This takes the bulk of the time required for the
  upgrade process.
Settings and metadata:: Settings and some component metadata in {nxrm} 2 are stored across many files.
  Conversely, {nxrm} 3 loads equivalent data into an http://orientdb.com/[OrientDB] database.

[[not-upgraded]]
==== What Is Not Upgraded

The file structures within your repository manager environment differs between version 2 and version 3.
Before <<upgrade-prep,preparing>> for the upgrade process, review this list of settings and configuration
items. These items are not automatically included when you upgrade:

* custom branding
* virtual repositories
* repositories with audit/quarantine enabled
* Java VM settings, including custom system properties or variables
* operating system `nexus` service scripts
* operating system optimization, such as increasing allowable open file handles
* environment variables affecting values used to control the repository manager
* third-party or custom-developed plugins
* Jetty server XML configuration files
* unimplemented repository formats
* manual edits to other files under the `nexus` installation directory, such as edits to
  `nexus/WEB-INF/classes/ehcache.xml`
* custom log levels or edits to `logback.xml` configuration files (e.g. custom log file rotation, file naming, log
  patterns)

There are equivalent configurations possible for all these values and customization in {nxrm} 3. The specifics
vary widely and have to be applied manually after determining the need for such customization  and developing
specific plans for the modifications. The scope of these modifications varies from zero to large
efforts. E.g. some VM start-up parameters might not be appropriate any more due to optimized performance of
version 3. On the other hand custom plugin features might now be a standard supported features or require a
completely new development effort.

[[upgrade-repo-support]]
==== Repository Format Support

{nxrm} 3 provides support for greatly expanded set of supported repository formats. A complete list of formats is
available in a https://support.sonatype.com/hc/en-us/articles/226495428[knowledge base article].  The list below
represents repository formats that can be included in the upgrade process.

* npm
* NuGet
* Site/Raw
* Maven2
* RubyGems

[[upgrade-prep]]
==== Designing Your Upgrade Plan

When upgrading, the most critical decisions you need to make about an upgrade plan are:

* Identification of a maintenance window for version 2, allowing the upgrade to proceed without
  interruption.
* Selection of an <<upgrade-architecture,installation scenario>> that best supports your upgrade plan.
* Selection of an <<upgrade-methods,upgrade method>>.
* Getting access to a <<upgrade-file-systems,system storage>>, as well as location for content to be 
transferred to.
* Identification of <<upgrade-support,configurations>> that may result in failure, and prevent upgrade of certain 
components.
* Review of <<upgrade-security,security settings>>, and associated differences between version 2 and version 3.
* Considerations for <<upgrade-performance,optimization, performance, and tuning>>.

[[upgrade-architecture]]
==== Supported Installation Scenarios

There are two scenarios for upgrading:

* Separate servers for version 2 and version 3 
* Version 2 and version 3 running on the same server

[[upgrade-methods]]
==== Data Transfer Methods

Upgrade is made possible by specific <<admin-system-capabilities,capabilities>> in version 2 and version 3 called
'Upgrade: Agent' and 'Upgrade'. These capabilities manage the communication between the two servers and can
transfer all configuration via web protocols. The bulk of the data to be transferred consists of all the binary
components in the repositories that are upgraded. Once the 'Upgrade: Agent' capability, mentioned in
<<upgrade-start>>, is enabled and both repository manager instances are communicating, you can choose one of three
methods for this transfer:

- HTTP Download
- File System Copying
- File System Hard Linking

*HTTP Downloading*

WARNING: When running the HTTP download method, we discourage you from synchronizing repository manager content
to cloud services or on-premises data centers. This tool is solely designed to allow for data and configuration
transfers between {nxrm} 2 to 3.

HTTP download is a transfer method in which version 3 makes HTTP requests to version 2 to transfer
configuration and data. This is the slowest option.

If version 2 and version 3 are running on different machines and do not share access to the same file system
storage, you must use the HTTP download method.

*File System Copying*

In this transfer method, version 2 tells version 3 the path of the file content to transfer and a simple file
system copying is performed.

This upgrade method works if versions 2 and version 3 are configured to access the same storage system on
identically named mount points. It is a faster process than the HTTP Download method, and has less impact on the
performance of version 2.

*File System Hard Linking*

In this transfer method, version 2 tells version 3 the path of the file content to transfer and a file system hard
link to the same content is created.

This upgrade method works if versions 2 and version 3 are configured to access the same storage system on
identically named mount points and hard linking is supported by the file system used. It is the fastest transfer
method.

[[upgrade-file-systems]]
==== File System Considerations

While discussed in greater detail in <<admin-repository-blobstores,Chapter 4>>, {nxrm} 3 allows you to create and
name multiple blob stores to store your content. Before you start the upgrade process it is important to consider
how you want to allocate space within the storage system.

When upgrading, make sure you have enough storage capacity in the destination file system(s). For instance, if
you are using hard linking, the data is not duplicated. This saves storage space, but you must ensure that there 
are enough file handlers available for the content you want to transfer during the upgrade process. On the other 
hand, file copy and downloading do duplicate your data so upwards of double the original storage space can be, at 
least temporarily, needed.

[[upgrade-support]]
==== Configuration Details for Upgrading

Due to fundamental changes in file structure between {nxrm} 2 and 3, you should review and compare the
configuration details to prevent any failures.

*Repository IDs*

The 'Repository ID' defined in version 2 is used as the 'Name' for the upgraded repository in {nxrm} 3 as they
define the access URL in both cases. The user-facing 'Repository Name' from version 2 is dropped in the upgrade.

In addition note that IDs of repositories and repository groups in version 2 that differ only by case will not be
accepted during an upgrade to version 3 (example version 2 IDs: `myrepoid` vs `Myrepoid`). To resolve the ID
conflict review and change any IDs in version 2 to distinguishable names.

*Repository Groups*

Review the contents of the repository groups defined in {nxrm} 2 to ensure its contents are a selected for
upgrade. A single component within the group, not selected, may prevent the entire group from being upgraded.

*User Tokens*

The upgrade tool only upgrades pre-existing user tokens to version 3, if user token support is enabled in
version 2. In version 2, click the 'User Token' tab, in the 'Administration' menu, and enable the setting.

*Repository Health Check and SSL Health Check*

You can include both your existing {rhc} and its corresponding SSL trust store configuration when you upgrade. If
you are a {oss} user you only have the ability to upgrade your settings from the 'Health Check: Configuration'
capability. If you are a {pro} user, you can also upgrade your existing 'SSL: Health Check' settings. After the
upgrade process is complete, settings for both 'Health Check: Configuration' and 'SSL: Health Check' capabilities
are enabled in version 3, as they were in version 2.

*NuGet API Key*

The upgrade tool adds all keys to version 3 that are present in version 2 when asked, even if the NuGet API Key
Realm is not active in version 2.

*HTTP(S) Proxy Configuration*

In general, your HTTP or HTTPS proxy settings for {nxrm} 2 may not be valid for your {nxrm} 3 environment. So you
need to configure your HTTP or HTTPS proxy settings in version 3 in order to upgrade them to version 2.

If HTTP or HTTPS proxy settings were enabled in your source {nxrm} 2, the upgrade to your target {nxrm} 3 might
fail because the target could not communicate with the source repository manager. That's because version 3 could
not find a version 2 proxy server in place. Therefore if the HTTP or HTTPS settings were enabled in version
2 during an upgrade, version 3 would use its original HTTP or HTTPS settings, ignoring the settings in place for
version 2. Additionally, a warning would be generated in the log if that error occurred.

*Licensing*

Any {nxrm} license you have will be applicable between version 2 and version 3. If you are upgrading your 
versions on the same server, no additional work need be done. If you are upgrading your {nxrm} 3 to a different 
server than {nxrm} 2, then you must reinstall the license on the new server, however, the license files are the 
same. You do not need a different license for {nxrm} 3 use.

*IQ Server*

If you are a {pro} user, and you want to upgrade your source {iq} settings and configuration to your target 
repository manager, ensure that your licenses include the integration for both versions. Your configuration for 
'IQ Server URL', 'Username', 'Password', and 'Request Timeout' will be included in the upgrade. Additional 
configuration, such as analysis properties, trust store usage, and the enabled {iq} connection itself will be 
upgraded from versions 2 to 3.

Repositories that have been configured with the 'IQ: Audit and Quarantine' capability will not be transferred 
to {nxrm} 3. If you choose to disable this capability, the repository can be transferred, but quarantine state 
and audit history will not be retained.

[[upgrade-security]]
==== Security Compatibility

Before you upgrade from version 2 to version 3 review the differences in security settings along the upgrade
path. Known changes may affect privileges, roles and repository targets. Repository targets no longer exist in
{nxrm} 3 and are replaced by content selectors as documented in <<content-selectors>>.

*Version 2 Roles*

Roles upgraded from version 2 are assigned a Role ID that starts with `nx2-` in {nxrm} 3. Role 
descriptions created during the upgrade process have the word '(legacy)' in their description.

*Version 2 Repository Targets and Target Privileges*

If upgrading your repository targets from version 2 to version 3, it is recommended you also upgrade your target
privileges and vice versa. If you do not upgrade both, you may find that you need to make further adjustments to
version 3 configuration to have things work as they did in version 2.

Repository targets from version 2 are converted to content selectors in version 3.  In contrast to repository
targets, which rely on regular expressions for user permissions, content selectors use the
http://commons.apache.org/proper/commons-jexl/[Java EXpression Language JEXL] to perform similar restrictions. The
upgrade process modifies repository target names to ensure compatibility with JEXL.

[[upgrade-performance]]
==== Optimization, Performance, and Tuning

When considering upgrade time and speed, take into account all enabled features on your {nxrm} 2 instance that you
may not need. You can optimize the performance of your upgrade by  disabling specific features. As discussed
in this https://support.sonatype.com/hc/en-us/articles/213465138[article about performance and tuning], identify
and then reduce your list of used features to improve the performance of your repository manager. See some
highlights, below:

System feeds:: If your organization does not rely on system feeds, often used for team communication, learn how 
to link:https://support.sonatype.com/hc/en-us/articles/213464998[disable] them.
Repair index tasks:: These tasks support searching components within the user interface, and do not need to be
rebuilt that often, consider disabling them across all repositories.
Snapshot removal tasks:: Enable both 'Remove Snapshots from Repository' and 'Remove Unused Snapshots From
  Repository', which deletes old component versions no longer needed.
Repositories no longer supported:: Remove any deprecated repositories. For example, any Maven 2 proxy repositories
   with the domain name 'codehaus.org' link:https://support.sonatype.com/hc/en-us/articles/217611787[should be deleted].
Rebuild Maven Metadata Files:: This scheduled task should only be run if you need to repair a corrupted Maven
repository storage on disk.
Staging rules:: If you are a {pro} user that uses the application for staging releases, redefine or reduce the
number of configured staging rules and staging profiles.
Scheduled task for releases:: If you find empty 'Use Index' checkboxes under 'Task Settings', use the opportunity
to disable or remove those specific tasks for releases.

////
* Reviewing the Custom Metadata capability (when enabled)
////

To help you decide how to reduce scheduled tasks, improving the performance of your upgrade, review the
link:https://support.sonatype.com/hc/en-us/articles/213465208[knowledge base article].

[[upgrade-start]]
==== Starting the Upgrade

After you've designed your upgrade plan, considered system performance, and assessed storage needs, there are a 
few basic steps to start the upgrade:


. Upgrade your existing version 2 instance to 2.14 or later as documented in <<upgrade-version-two>>.
. Install {nxrm} 3, if upgrading to a new instance 
. Enable the upgrade capabilities in both version 2 and version 3.

With the above complete, you can use the upgrade tool in version 3, which guides you through upgrading in three
phases:

. 'Preparing', the phase that prepares the transfer and creation of all configuration and components.
. 'Synchronizing', the phase that counts and processes all components set to upgrade and upgrades all other
configuration.
. 'Finishing', the phase that performs final clean up, then closes the process.

[[upgrade-configuration]]
==== Enabling the Upgrade Capability in Version 2

In version 2, enable the 'Upgrade: Agent' capability to open the connection for the upgrade-agent.
Follow these steps:

. Click 'Administration' in the left-hand panel.
. Open the 'Capabilities' screen.
. Select 'New' to access the 'Create new capability' modal.
. Select 'Upgrade: Agent' as your capability 'Type'.
. Click 'Add' to close the modal.
. Copy and save the 'Access Token' found on the 'Status' tab for your new capability. You need it to configure the
'Upgrade' tool in version 3.

In the lower section of the 'Capabilities' interface, the repository manager acknowledges the upgrade-agent as
'Active'.

[[upgrade-plan]]
==== Enabling the Upgrade Capability in Version 3.1 (or later)

In version 3, enable the 'Upgrade' capability to open the connection for the upgrade-agent, and
access the 'Upgrade' tool. Follow these steps:

. Click 'Capabilities' in the 'System' section of the 'Administration' main menu, to open the 'Capabilities' feature view.
. Click 'Create capability'.
. Select 'Upgrade', then click 'Create capability' to enable the upgrade.

[[upgrade-content]]
==== Upgrading Content

After you enable the upgrade capabilities, access the upgrade tool in {nxrm} 3 to start your upgrade.

. Go to the 'Administration' menu.
. Select 'Upgrade' located in the  'System' section of the 'Administration' main menu to open the wizard.

Overview:: The upgrade tool provides an overview of what is allowed for an upgrade as well as warnings on what 
cannot be upgraded.

Agent Connection:: This screen presents two fields, 'URL' and 'Access Token'. In the 'URL' field, enter the
URL of your version 2 server including the context path e.g. +http://localhost:8081/nexus/+. In the 'Access Token'
field, enter the access token, copied from your version 2 'Upgrade: Agent' capability 'Status' tab.

Content:: This screen allows you to select from 'Repository configuration and content', which includes user
accounts and associated security settings, and 'Server configuration'. Check the options that apply.

TIP: The 'Repository configuration and content' upgrades all user accounts when selected. If certain user
accounts aren't desired in {nxrm} 3 then you can delete them from the {nxrm} 3 after the upgrade for all
repositories is done.

Repository Defaults:: The 'Repository Defaults' screen allows you to select the directory destination and
transfer method. The first drop-down menu, 'Destination' allows you to pick a blob store name different
from default. The second drop-down menu, 'Method', allows you to choose the transfer method. This section
allows you to click and change each repository's individual transfer method and destination (i.e. blob
store).

[[fig-upgrade-repositories-partial]]
.Partial List of Repository Selections for Upgrade
image::figs/web/upgrade-repositories-partial.png[scale=60]

Repositories:: If 'User-Managed Repositories' is one of your selections from the 'Content' screen, the
'Repositories' screen allows you to select which repositories you want to upgrade. As shown in
<<fig-upgrade-repositories-partial>>, you can select all repositories with one click, at the top of the
table. Alternatively, you can select each individual repository and customize upgrade options for each repository
with the configuration icons in the last column. In addition to 'Repository', the table displays information about
the status of the repository. Keep in mind that the 'Repository ID' defined in version 2 is displayed in the list
and after the upgrade used as the 'Name' of the repository.

Preview:: This table displays a preview of the content set for the upgrade, selected in the previous screens. 
Click 'Begin', then confirm from the modal, that you want to start the upgrade process.

////
Might be worth making this a list. Also moving 'Crowd', 'User Tokens' 'IQ Server', as they are pro options
////

==== Running the Upgrade

After the upgrade was started in the 'Preview' screen, the repository manager starts with a short 'Preparing'
step.  From this point on, no further configuration changes should be performed on version 2. They will not be
moved to version 3.

Any upgrade process invoked destroys any existing configuration in the target {nxrm} 3 server and replaces it with
the upgraded configuration from version 2.

However, any content changes to the upgraded repositories continue to be upgraded during the following 
'Synchronizing' step. For example, new proxied components or new deployed components in version 2 are transferred
to version 3.

The status in the view shows the number of components transferred and when the last changes where detected in
version 2. Once all components are migrated and no further changes have been detected for a while the upgrade is
mostly complete. You can now decide upon waiting for further deployments to version 2 or finalizing the upgrade. To
finalize, stop the monitoring and proceed through the 'Finishing' screen.

===== Upgrade Scenarios

You can transfer all components at once, but the time to complete these steps depends on the amount of components
transferred. This can range from minutes to hours and potentially beyond. With that in mind, your upgrade plan allows
you to transfer repositories and repository configurations, incrementally.

When you upgrade individual repositories, the content can only be transferred once. When the repository content is
transferred to {nxrm} 3, it can't be upgraded again unless it's removed from the target. However, upgrading content
from your 'Security' or 'System' options has a different operation. These are non-repository configurations. If
transferred from a previous upgrade, the new upgrade will overwrite the existing non-repository configurations in
{nxrm} 3.

Typically an upgrade should be treated as a single process that potentially spans multiple steps. These can be
separate invocations of the upgrade tool with verification on the target {nxrm} 3 in between. Repeated upgrade of
repositories includes the related configuration such as repository targets/content selectors and related security
configuration. It is destructive to configuration from a prior upgrade. Keeping this in mind, here are a few
possible alternative steps you can perform:

- transfer everything, abort at any stage, then re-initiate a second upgrade after modifications on the source {nxrm} 2
- transfer non-repository configuration and several repositories, then return to upgrade the rest of the repositories
- transfer all content, and then upgrade everything a second time (though, previously upgraded repositories can not be 
selected)
- transfer non-repository configuration, then optionally return and upgrade all repositories

==== After the Upgrade

With the upgrade completed and all components transferred, you can perform the next steps in your upgrade
plan. These can include:

- Stop {nxrm} 2.
- Archive {nxrm} 2 and delete the install from the server.
- Reconfigure {nxrm} 3 to use the <<config-http-port, HTTP port>>, <<config-context-path,context path>> and
  <<config-legacy-url,repository paths of version 2>>, if desired.
- Alternatively update all tool configurations pointing to the repository manager, such as Maven settings files
  and POM files.

[[config-legacy-url]]
===== Configuring Legacy URL Paths

By default, {nxrm} 2 uses a different URL pattern to expose repositories and repository groups than {nxrm} 3. 
While automated tools and CI can be reconfigured to utilize the new patterns, it is possible to change a 
configuration on the {nxrm} end to allow your upgrade to use the old pattern as well.

This can be done in `$data-dir/nexus3/etc/nexus.properties` by adding

----
org.sonatype.nexus.repository.httpbridge.internal.HttpBridgeModule.legacy=true
----

As with any {nxrm} <<configure-runtime,configuration>> change, the server must be restarted for this to start 
working.  Once done, this will allow the example of `http://localhost:8081/nexus/repository/sample` to also be 
accessed using `http://localhost:8081/nexus/content/repositories/sample`.

This example (above) assumes your hostname (localhost), port (8081) and context path (nexus) match between your 
{nxrm} 2 and {nxrm} 3 installations.  If not, you must utilize the ones from version 3 or reconfigure as stated 
above.

NOTE: Any automated tooling that uses direct repository browsing will not function in {nxrm} 3 as that is not 
currently supported.
